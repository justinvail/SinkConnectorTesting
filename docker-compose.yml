version: "3.3"

services:
    zookeeper:
        image: confluentinc/cp-zookeeper:6.1.2
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - bip
        extra_hosts:
            - "host.docker.internal:host-gateway"
    broker:
        image: confluentinc/cp-server:6.1.2
        hostname: broker
        container_name: broker
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
            - "9101:9101"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_JMX_PORT: 9101
            KAFKA_JMX_HOSTNAME: localhost
            KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: "true"
            CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
        networks:
            - bip
        extra_hosts:
            - "host.docker.internal:host-gateway"

    connect:
        image: confluentinc/cp-kafka-connect-base:6.1.2
        hostname: connect
        container_name: connect
        depends_on:
            - broker
        ports:
            - "8083:8083"
            - "443:443"
        volumes:
            - ./jdbcConnect:/usr/share/java/kafka-connect-jdbc
        environment:
            CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
            CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
            CONNECT_REST_PORT: 8083
            CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect-01"
            CONNECT_GROUP_ID: compose-connect-group
            CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
            CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
            CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
            CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
            CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
            CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
            CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
            CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
            CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
            CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
            CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
            CONNECT_PLUGIN_PATH: "/usr/share/java"
        command:
            - /bin/bash
            - -c
            - |
                sleep infinity &
                /etc/confluent/docker/run
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - bip

    schema-registry:
        image: confluentinc/cp-schema-registry:6.1.2
        hostname: schema-registry
        container_name: schema-registry
        depends_on:
            - broker
        ports:
            - "8081:8081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
            SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
        networks:
            - bip

    control-center:
        image: confluentinc/cp-enterprise-control-center:6.1.2
        hostname: control-center
        container_name: control-center
        depends_on:
            - broker
        ports:
            - "9021:9021"
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
            CONTROL_CENTER_CONNECT_CLUSTER: "connect:8083"
            CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
            CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
            CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
            CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
            CONFLUENT_METRICS_TOPIC_REPLICATION: 1
            PORT: 9021
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - bip

    init-topic:
        image: confluentinc/cp-kafka:6.1.2
        hostname: init-topic
        container_name: init-topic
        depends_on:
            - zookeeper
            - broker
            - connect
            - control-center
            - schema-registry
        networks:
            - bip
        entrypoint: [ '/bin/sh', '-c' ]
        command: |
            "            
            # blocks until kafka is reachable
            echo -e 'Attempting to reach broker'
            kafka-topics --bootstrap-server broker:29092 --list
            
            # Below, create as many topics as you want
            echo -e 'Creating kafka topics'
            kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic local-contention-event-base --replication-factor 1 --partitions 1
            
            echo -e 'Successfully created the following topics:'
            kafka-topics --bootstrap-server broker:29092 --list
            "
networks:
    bip:
        driver: bridge